/*
 * Copyright (c) 2017 Stelliox.com.
 * 
 * This file is part of Stelliox.com.
 * 
 * This code can not be copied and/or distributed without the express
 * permission of Stelliox.com <ejemplo@stelliox.com>
 * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *    DEVELOPED BY STELLIOX.COM
 *    ECUADOR - LOJA - 2017
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
package GUI;

import INTERPRETER.Interpreter;
import LEXER.Lexer;
import LEXER.Token;
import MEMORY.GLOBAL_SPOCE;
import PARSER.AST;
import PARSER.Parser;
import SYSMBOLS.SymbolTableBuilder;
import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.TabSet;
import javax.swing.text.TabStop;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Stelliox.com
 */
public final class MainView extends javax.swing.JFrame {

    private static final FileFilter fileFilter = new FileFilter() {
        @Override
        public boolean accept(File pathname) {
            String name = pathname.getName().toLowerCase();
            return pathname.isFile() && name.endsWith(".pas");
        }
    };
    
    String path,file;
    File folder;
    File[] listOfFiles;
    
    public MainView() {
        initComponents();
        setStyleJtxtArea();
        
        final UndoManager undo = new UndoManager();
        Document document = jtxtPinput.getDocument();
        document.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent uee) {
                undo.addEdit(uee.getEdit());
            }
        });
        
        jtxtPinput.getActionMap().put("Undo", new AbstractAction("Undo") {
             @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                  if (undo.canUndo()) {
                    undo.undo();
                  }
                } catch (CannotUndoException e) {
                }
            }          
        });
        jtxtPinput.getInputMap().put(KeyStroke.getKeyStroke("control Z"), "Undo");
        setTabs(jtxtPinput, 3);
        
        PrintStream printStream = new PrintStream(new CustomOutputStream(jtxtOut));
         
        System.setOut(printStream);
        System.setErr(printStream);
        
//        try {
//            Image img = ImageIO.read(getClass().getResource("resources/run.png"));
//            jbtnRun.setIcon(new ImageIcon(img));
//            jbtnRun.setSize(new Dimension(10, 10));
//        } catch (Exception ex) {
//            System.out.println(ex);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jpnlDir = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlstFile = new javax.swing.JList();
        jSplitPane4 = new javax.swing.JSplitPane();
        jpnlIn = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxtPinput = new javax.swing.JTextPane();
        jpnlOut = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxtOut = new javax.swing.JTextArea();
        jbtnRun = new javax.swing.JButton();
        jbtnSave = new javax.swing.JButton();
        jbtnNew = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpnlDir.setBackground(new java.awt.Color(0, 204, 255));

        jlstFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlstFileMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jlstFile);

        javax.swing.GroupLayout jpnlDirLayout = new javax.swing.GroupLayout(jpnlDir);
        jpnlDir.setLayout(jpnlDirLayout);
        jpnlDirLayout.setHorizontalGroup(
            jpnlDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnlDirLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpnlDirLayout.setVerticalGroup(
            jpnlDirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlDirLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jpnlDir);

        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jpnlIn.setBackground(new java.awt.Color(153, 102, 255));

        jtxtPinput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtPinputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtPinputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtPinputKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jtxtPinput);

        javax.swing.GroupLayout jpnlInLayout = new javax.swing.GroupLayout(jpnlIn);
        jpnlIn.setLayout(jpnlInLayout);
        jpnlInLayout.setHorizontalGroup(
            jpnlInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlInLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpnlInLayout.setVerticalGroup(
            jpnlInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnlInLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane4.setLeftComponent(jpnlIn);

        jpnlOut.setBackground(new java.awt.Color(255, 102, 51));

        jtxtOut.setEditable(false);
        jtxtOut.setColumns(20);
        jtxtOut.setRows(5);
        jScrollPane3.setViewportView(jtxtOut);

        javax.swing.GroupLayout jpnlOutLayout = new javax.swing.GroupLayout(jpnlOut);
        jpnlOut.setLayout(jpnlOutLayout);
        jpnlOutLayout.setHorizontalGroup(
            jpnlOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlOutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpnlOutLayout.setVerticalGroup(
            jpnlOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlOutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane4.setRightComponent(jpnlOut);

        jSplitPane1.setRightComponent(jSplitPane4);

        jbtnRun.setText("Ejecutar");
        jbtnRun.setBorder(null);
        jbtnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRunActionPerformed(evt);
            }
        });

        jbtnSave.setText("Guardar");
        jbtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaveActionPerformed(evt);
            }
        });

        jbtnNew.setText("Nuevo");
        jbtnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNewActionPerformed(evt);
            }
        });

        jMenu1.setText("Cerrar Projecto");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtPinputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPinputKeyTyped
        
    }//GEN-LAST:event_jtxtPinputKeyTyped

    private void jtxtPinputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPinputKeyPressed
//        char text = evt.getKeyChar();
//        if (text ==  KeyEvent.VK_TAB){
//            
//        }
    }//GEN-LAST:event_jtxtPinputKeyPressed
    
    public void setDir(String dir) {
        path = dir;
        folder = new File(path);
        listOfFiles = folder.listFiles(fileFilter);
        
        DefaultListModel model = new DefaultListModel();
        for (File file : listOfFiles) {
            model.addElement(file.getName());
        }
        jlstFile.setModel(model);
    }
    public void setTabs(JTextPane textPane, int charactersPerTab) {
        FontMetrics fm = textPane.getFontMetrics( textPane.getFont() );
        int charWidth = fm.charWidth('w');
        int tabWidth = charWidth * charactersPerTab;

        TabStop[] tabs = new TabStop[10];

        for (int j = 0; j < tabs.length; j++) {
        int tab = j + 1;
        tabs[j] = new TabStop( tab * tabWidth );
        }
         
        TabSet tabSet = new TabSet(tabs);
        SimpleAttributeSet attributes = new SimpleAttributeSet();
        StyleConstants.setTabSet(attributes, tabSet);
        int length = textPane.getDocument().getLength();
        textPane.getStyledDocument().setParagraphAttributes(0, length, attributes, true);
    }
    
    private void jtxtPinputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPinputKeyReleased
        try {
            styleJtxta();
        } catch (BadLocationException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jtxtPinputKeyReleased

    private void jlstFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlstFileMouseClicked
        File file = new File(path+"\\"+(String)jlstFile.getSelectedValue());
        if(file.isFile()) {
            try {
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                String str;
                jtxtPinput.setText("");
                while((str = bufferedReader.readLine())!=null) {
                    jtxtPinput.setText(jtxtPinput.getText()+str+"\n");
                }
                styleJtxta();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jlstFileMouseClicked

    private void jbtnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRunActionPerformed
        jtxtOut.setText("");
        GLOBAL_SPOCE.getInstance().reset();
        Lexer lexer = new Lexer(jtxtPinput.getText().replaceAll("\t", " ").replaceAll("\n", " "));
        Parser parser = new Parser(lexer);
        AST tree = parser.parse();
        
        SymbolTableBuilder stb = new SymbolTableBuilder();
        stb.visitX(tree);
        
        Interpreter interpreter = new Interpreter(tree);
        interpreter.interpret();
        
        GLOBAL_SPOCE global_spoce = GLOBAL_SPOCE.getInstance();
        System.out.println(global_spoce);
    }//GEN-LAST:event_jbtnRunActionPerformed

    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
        try {
            File file = new File(path+"\\"+(String)jlstFile.getSelectedValue());
            if(file.exists()) {
                if(file.isFile()) {
                    FileWriter fileWriter = null;
                    try {
                        fileWriter = new FileWriter(file);
                        PrintWriter printWriter = new PrintWriter(fileWriter);
                        printWriter.append(jtxtPinput.getText());
                        
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            if (fileWriter != null)
                                fileWriter.close();
                        } catch (Exception e2) {
                        }
                    }
                }
            } else
                file.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtnSaveActionPerformed

    private void jbtnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNewActionPerformed
        String name = JOptionPane.showInputDialog(this, "Nombre del archivo:");
        if(name != null) {
            if(new File(path+"\\"+name+".pas").exists()) {
                JOptionPane.showMessageDialog(this, "El archivo ya existe");
                return ;
            }
                
            DefaultListModel model = (DefaultListModel) jlstFile.getModel();
            model.addElement(name+".pas");
            jlstFile.setModel(model);

            jlstFile.setSelectedIndex(jlstFile.getLastVisibleIndex());
            jtxtPinput.setText("");
            jbtnSaveActionPerformed(null);
        }
    }//GEN-LAST:event_jbtnNewActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
       
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitView().setVisible(true);
            }
        });
    }//GEN-LAST:event_jMenu1MouseClicked
   
    StyleContext sc = new StyleContext();
    DefaultStyledDocument doc = new DefaultStyledDocument(sc);
    Style blue = sc.addStyle("ConstantWidth", null);
    Style green = sc.addStyle("ConstantWidth", null); 
    Style orange = sc.addStyle("ConstantWidth", null); 
    Style black = sc.addStyle("ConstantWidth", null);
    
    private void setStyleJtxtArea() {        
        StyleConstants.setForeground(blue, Color.blue);
        StyleConstants.setForeground(green, Color.green);
        StyleConstants.setForeground(orange, Color.orange);
        StyleConstants.setForeground(black, Color.black);
        
        jtxtPinput.setStyledDocument(doc); 
    }
    
    private void styleJtxta() throws BadLocationException {
        char[] txt = jtxtPinput.getText().toCharArray();
        
        int start = -1;
        int end = -1; 
        String txtF; 
        int tmp = 0;
        boolean comment = false;
        for (int i = 0; i < txt.length; i++) {
            if(Character.getType(txt[i]) == 15)
                tmp++;
            if(txt[i] == '{' && !comment) {
                start = i;
                comment = true;
            }
            if(txt[i] == '}' && comment) {
                end = i;
            }
            
            if(Character.isAlphabetic(txt[i]) && !comment) { 
                if(i == 0)
                    start = i;
                else
                    if(!Character.isAlphabetic(txt[i-1]))
                        start = i;                
            } else {
                if(start != -1) {
                    if(Character.isAlphabetic(txt[i-1]) && !comment) {
                        end = i; 
                        txtF = "";
                        for (int j = start; j < end; j++) {
                            txtF += txt[j];
                        }                        
                        try {
//                            start -= (tmp/2);
//                            end -= (tmp/2);
                            Token.TokenType token = Token.TokenType.valueOf(txtF);
                            if(token == Token.TokenType.INTEGER || token == Token.TokenType.REAL)
                                doc.setCharacterAttributes(start, end, green, false);
                            else
                                doc.setCharacterAttributes(start, end, blue, false);
                        } catch (Exception e) {
                            doc.setCharacterAttributes(start, end, black, false);
                        }                        
                        doc.setCharacterAttributes(end, end+1, black, false);                        
                        start = end = -1;
                    } else if(comment && end != -1) {
//                        start -= (tmp/2);
//                        end -= (tmp/2);
                        doc.setCharacterAttributes(start, end, orange, false);
                        doc.setCharacterAttributes(end+1, end+1, black, false); 
                        comment = false;
                        start = end = -1;
                    }
                }
            }
        }
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                MainView mainView = new MainView();
//                mainView.setDir("D:\\Z-STELLIOX\\Interpreter\\testDir");
//                mainView.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JButton jbtnNew;
    private javax.swing.JButton jbtnRun;
    private javax.swing.JButton jbtnSave;
    private javax.swing.JList jlstFile;
    private javax.swing.JPanel jpnlDir;
    private javax.swing.JPanel jpnlIn;
    private javax.swing.JPanel jpnlOut;
    private javax.swing.JTextArea jtxtOut;
    private javax.swing.JTextPane jtxtPinput;
    // End of variables declaration//GEN-END:variables
}
